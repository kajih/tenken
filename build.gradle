import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.openapi.generator)
    alias(libs.plugins.ben.manes.versions)
}

group = 'xyz.kajih'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    gradlePluginPortal()
    mavenCentral()
    maven { url = 'https://repo.spring.io/milestone' }
    maven { url = 'https://repo.spring.io/snapshot' }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation libs.spring.boot.starter.webflux

    // OpenApi Generator
    implementation libs.jakarta.annotation.api
    implementation libs.spring.boot.starter.validation
    implementation libs.jackson.databind.nullable
    implementation libs.swagger.annotations


    annotationProcessor libs.lombok
    compileOnly libs.lombok

    developmentOnly libs.spring.boot.dev.tools
    annotationProcessor libs.spring.boot.configuration.processor

    testImplementation libs.spring.boot.starter.test

    testImplementation libs.reactor.test

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    implementation platform("org.springframework.modulith:spring-modulith-bom:1.4.0-RC1")

    implementation libs.jackson.dataformat.csv
    implementation libs.datafaker
}

tasks.named('test') {
    useJUnitPlatform()
}

// Define the path to your OpenAPI YAML file
def generatedDir = layout.buildDirectory.dir("generated").get().asFile
def openApiSpec = "${layout.projectDirectory}/src/main/resources/openapi.yaml"

openApiGenerate {
}

tasks.register('generateServer', GenerateTask) {
    generatorName = 'spring'
    library = "spring-boot"
    inputSpec = openApiSpec
    outputDir = "$generatedDir"
    apiPackage = 'xyz.kajih.tenken.server.api'
    modelPackage = 'xyz.kajih.tenken.server.model'
    invokerPackage = 'xyz.kajih.tenken.server.invoker'
    configOptions = [
            useSpringBoot3          : 'true',
            reactive                : 'true',
            interfaceOnly           : 'true',
            generateControllerAdvice: 'false',
            generateInterfaces      : 'true',
            dateLibrary             : 'java8'
    ]
}

tasks.register('generateClient', GenerateTask) {
    generatorName = 'java'
    library = "webclient"
    inputSpec = openApiSpec
    outputDir = "$generatedDir"
    apiPackage = 'xyz.kajih.tenken.client.api'
    modelPackage = 'xyz.kajih.tenken.client.model'
    invokerPackage = 'xyz.kajih.tenken.client.invoker'

    configOptions = [
            annotationLibrary: 'swagger2',
//            generateClientAsBean: 'true',
            useJakartaEe     : 'true',
            dateLibrary      : 'java8',
            useSpringBoot3   : 'true'
    ]
}

clean.doFirst {
    delete "$generatedDir"
}

sourceSets {
    main {
        java {
            srcDir "${generatedDir}/src/main/java"
        }
    }
}

compileJava.dependsOn generateServer
compileJava.dependsOn generateClient